{"version":3,"sources":["Image/UNO.png","Image/TienLen.jpg","components/SideBar/Index.js","Scenes/Home/Index.js","services/url.js","services/api.js","components/IconHeader/Index.js","Scenes/Players/Index.js","services/createObject.js","Scenes/Groups/Index.js","services/run.js","Scenes/Game/Gameplay.js","components/GroupCard/Index.js","Scenes/Game/Uno.js","Scenes/Game/Finish.js","Scenes/Game/Index.js","Scenes/Results/Summary.js","Scenes/Results/Index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","sideBarValue","name","sideIcon","link","handleItemClick","sideBar","setState","history","push","withRouter","props","_useState","useState","_useState2","Object","slicedToArray","activeItem","setActiveItem","react_default","a","createElement","Segment","inverted","Menu","secondary","Item","header","Responsive","assign","onlyComputer","as","Header","Icon","size","onlyMobile","map","index","key","active","onClick","position","Dropdown","item","text","HomePage","Container","color","padded","url","server","getAllAPIType","type","axios","concat","method","getOneAPIType","id","postNewAPIType","value","data","deleteAPIType","IconHeader","icon","textAlign","circular","Content","Subheader","sub","PlayersPage","setName","_useState3","_useState4","error","setError","_useState5","_useState6","listPlayer","setListPlayer","panes","menuItem","render","Tab","Pane","Form","Field","placeholder","onChange","event","target","Message","content","Button","primary","then","catch","err","length","List","divided","verticalAlign","player","_id","floated","console","log","Loader","inline","fecthPlayers","_ref","asyncToGenerator","regenerator_default","mark","_callee","res","wrap","_context","prev","next","sent","t0","stop","apply","this","arguments","useEffect","IconHeader_Index","Divider","raised","Grid","columns","relaxed","Column","vertical","Group","background","players","games","Gameplay","group","stages","summary","game","idGroup","avatarGroups","GroupsPage","nameGroup","validNameGroup","avatar","setAvatar","playerCheck","setPlayerCheck","_useState7","_useState8","_useState9","_useState10","setPlayers","_useState11","_useState12","groups","setGroups","Input","label","grouped","Checkbox","checked","idPlayer","filter","ava","Radio","newValuePost","Popup","basic","trigger","fetchPlayerGroups","_ref2","_ref3","resPlayers","resGroups","Promise","all","oneWin","arrayGames","winner","inGame","isWin","setPointPlayer","point","persist","parseInt","gameplayArray","pointWin","reduce","acc","cur","pointWinner","namePlayer","pointWinArray","forEach","stage","gameplay","saveData","gameName","callback","newSummary","winPoint","Math","max","summaryOfStages","GameplayPage","setGroup","setStages","stageNumber","setStageNumber","setGameplay","match","fetchGroup","newGame","_x","params","groupID","keys","horizontal","Table","definition","Body","Row","Cell","width","moment","format","celled","compact","fullWidth","HeaderCell","valueArray","collapsing","slider","disabled","onFocus","Footer","colSpan","Modal","Description","negative","hidden","Actions","gameplayArr","colot","fluid","inStage","RouteGroup","undefined","Card","Image","src","wrapped","ui","ordered","extra","Link","to","UnoPage","fetchGroups","react_router","exact","path","GroupCard_Index","Game_Gameplay","routePageArr","nameRoute","description","imageUno","imageTienLen","RouteGamePage","centered","route","GamePage","Uno","Finish","SummaryPage","createAt","idGameplay","playAt","ResultsPage","Summary","App","react_router_dom","Index","Home_Index","Players_Index","Groups_Index","Game_Index","Results_Index","Boolean","window","location","hostname","ReactDOM","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0160093f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/UNO.079f06c7.png\";","module.exports = __webpack_public_path__ + \"static/media/TienLen.92c7e4d2.jpg\";","import React,{useState} from \"react\";\nimport {Menu, Icon, Segment, Responsive, Dropdown} from \"semantic-ui-react\";\nimport {withRouter} from 'react-router-dom';\n\nconst sideBarValue = [\n    { name : 'Home', sideIcon : 'home', link : '/' },\n    { name : 'Players', sideIcon : 'user', link : '/players' },\n    { name : 'Groups', sideIcon : 'group', link : '/groups' },\n    { name : 'Game', sideIcon : 'chess rook', link : '/game' },\n    { name : 'Results', sideIcon : 'balance', link : '/results' }\n];\n\nfunction SideBar(props) {\n    const [activeItem,setActiveItem] = useState('Home');\n    const {history} = props;\n    return (\n        <Segment inverted >\n            <Menu inverted secondary >\n\n                <Menu.Item header >\n                    <Responsive\n                    />\n                    <Responsive\n                        {...Responsive.onlyComputer}\n                        as={Menu.Header}\n                    >\n                        <Icon name='chess king' size='big' /> Exchange Game\n                    </Responsive>\n                    <Responsive\n                        {...Responsive.onlyMobile}\n                        as={Icon}\n                        name='chess king'\n                        size='large'\n                    />\n                </Menu.Item>\n                {/* only show Game Result in mobile */}\n                \n                <Menu.Menu>\n                    {\n                        sideBarValue.map((sideBar,index) => (\n                            <Responsive\n                                {...Responsive.onlyComputer}\n                                key={index}\n                                as={Menu.Item}\n                                active={activeItem === sideBar.name }\n                                onClick={() => handleItemClick(sideBar,setActiveItem,history) }\n                            >\n                                <Icon name={sideBar.sideIcon} />\n                                {sideBar.name}\n                            </Responsive>\n                        ))\n                    }\n                </Menu.Menu>\n                \n                {/* dropdown */}\n                <Menu.Menu position='right' >\n                    <Responsive\n                        {...Responsive.onlyMobile}\n                        as={Dropdown}\n                        item\n                        text='Menu'\n                    >\n                        <Dropdown.Menu>\n                            {\n                                sideBarValue.map((sideBar,index) => (\n                                    <Dropdown.Item \n                                        key={index}\n                                        onClick={() => handleItemClick(sideBar,setActiveItem, history) }\n                                    > \n                                        <Icon name={sideBar.sideIcon} />\n                                        {sideBar.name} \n                                    </Dropdown.Item>\n                                ))\n                            }\n                        </Dropdown.Menu>\n                    </Responsive>\n                </Menu.Menu>\n            </Menu>\n        </Segment>    \n    )\n};\n\nfunction handleItemClick(sideBar,setState,history) {\n    setState(sideBar.name);\n    history.push(sideBar.link);\n};\n\nexport default withRouter(SideBar);","import React from \"react\";\nimport { Container, Header, Segment } from \"semantic-ui-react\";\n\nfunction HomePage(props) {\n    return (\n        <Container text >\n            <Segment color='black' padded='very' >\n                <Header as='h2' > Tool tính điểm game UNO </Header>\n                <p>\n                Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commodo ligula eget dolor.\n                Aenean massa strong. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur\n                ridiculus mus. Donec quam felis, ultricies nec, pellentesque eu, pretium quis, sem. Nulla\n                consequat massa quis enim. Donec pede justo, fringilla vel, aliquet nec, vulputate eget, arcu.\n                In enim justo, rhoncus ut, imperdiet a, venenatis vitae, justo. Nullam dictum felis eu pede\n                link mollis pretium. Integer tincidunt. Cras dapibus. Vivamus elementum semper nisi. Aenean\n                vulputate eleifend tellus. Aenean leo ligula, porttitor eu, consequat vitae, eleifend ac,\n                enim. Aliquam lorem ante, dapibus in, viverra quis, feugiat a, tellus. Phasellus viverra nulla\n                ut metus varius laoreet. Quisque rutrum. Aenean imperdiet. Etiam ultricies nisi vel augue.\n                Curabitur ullamcorper ultricies nisi.\n                </p>\n\n            </Segment>\n        </Container>\n    )\n};\n\nexport default HomePage;","const url = {\n    server : 'http://localhost:9000'\n};\n\nexport default url;","import axios from 'axios';\nimport url from './url';\n// === PURE FUNCTION\n\n// logic : GET\nfunction getAllAPIType(type) {\n    return axios({\n        url : `${url.server}/${type}`,\n        method : 'GET',\n    });\n}\nfunction getOneAPIType(type, id) {\n    return axios({\n        url : `${url.server}/${type}/${id}`,\n        method : 'GET'\n    })\n}\n\n// logic : POST\nfunction postNewAPIType(type,value) {\n    return axios({\n        url : `${url.server}/${type}`,\n        method : 'POST',\n        data : value\n    });\n}\n\n// logic : PUT\nfunction putAPIType(type,id,value) {\n    return axios({\n        url : `${url.server}/${type}/${id}`,\n        method : 'put',\n        data : value\n    });\n}\n\n// DELETE\nfunction deleteAPIType(type,id) {\n    return axios({\n        url : `${url.server}/${type}/${id}`,\n        method : 'delete'\n    });\n}\nexport {getAllAPIType, getOneAPIType, postNewAPIType, putAPIType,deleteAPIType};","import React from 'react';\nimport { Header, Icon } from 'semantic-ui-react';\n\nfunction IconHeader(props) {\n    return (\n        <Header as='h2' icon textAlign='center' >\n            <Icon name={props.icon} circular />\n            <Header.Content> {props.header} </Header.Content>\n            <Header.Subheader> {props.sub} </Header.Subheader>\n        </Header>\n    )\n};\n\nexport default IconHeader;","import React, {useState,useEffect} from 'react';\nimport { getAllAPIType,postNewAPIType,deleteAPIType } from \"../../services/api\";\nimport IconHeader from '../../components/IconHeader/Index';\nimport { Container, Divider, Segment, Grid, Form, Button, Header, Icon, Loader, List, Message, Responsive, Tab } from 'semantic-ui-react';\n \nfunction PlayersPage() {\n    const [name, setName] = useState({ name : '' });\n    const [error,setError] = useState(false);\n    const [listPlayer, setListPlayer] = useState([]);\n\n    const panes = [\n        {\n            menuItem : 'Add Player',\n            render : () => <Tab.Pane>\n                        \n                        <Form error={error} >\n                            <Form.Field>\n                                <label> <Icon name='address card' /> Name : </label>\n                                <input\n                                    value={name.name}\n                                    placeholder='Name Player ' \n                                    onChange={(event) => setName({name : event.target.value }) }\n                                />\n                            </Form.Field>\n                            <Message\n                                error\n                                header='Error'\n                                content='Error try again !'\n                            />\n                            <Button \n                                type='submit' \n                                primary \n                                onClick={() => {\n                                postNewAPIType('players',name)\n                                .then(value => {\n                                        listPlayer.push(value.data);\n                                        setName({name : ''});\n                                        setError(false);\n                                        //document.getElementById('inputName').value = '';\n                                })\n                                .catch(err => setError(true) );\n                                } }\n                            > <Icon name='check' /> Submit</Button>\n                        </Form>\n            </Tab.Pane>\n        },\n        {\n            menuItem : 'List Player',\n            render : () => <Tab.Pane>\n            {\n                            ( !!listPlayer.length ) ?\n                            // get data success\n                            <List divided verticalAlign='middle' size='big' >\n                                {/* test listPlayer */}\n                                {\n                                    listPlayer.map(player => (\n                                        <List.Item key={player._id} >\n                                            <List.Content floated='right' >\n                                                <Button \n                                                    icon \n                                                    color='red' \n                                                    size='mini' \n                                                    onClick={() => {\n                                                        console.log(player._id)\n                                                        deleteAPIType('players',player._id)\n                                                        .then(value => setListPlayer(value.data) )\n                                                        .catch(err => console.log(err) )\n                                                    }}\n                                                > <Icon name='delete' /> </Button>\n                                            </List.Content>\n                                            <Icon name='user' />\n                                            <List.Content verticalAlign='middle' > {player.name} </List.Content>\n                                        </List.Item>\n                                    ))\n                                }\n                            </List>\n                            :\n                            // Loading khi chờ get data\n                            <Segment>\n                            <Loader active inline='centered' />\n                            </Segment>\n            }  \n            </Tab.Pane>\n        }\n    ];\n\n    const fecthPlayers = async () => {\n        try {\n            const res = await getAllAPIType('players');\n            setListPlayer(res.data);\n        } catch(err) {\n            setListPlayer([]);\n        }\n    };\n\n    useEffect(() => { fecthPlayers() }, []);\n\n    return (\n        <Container>\n            <IconHeader icon='users' header='Players' sub='Player : Create and List' />\n            <Divider/>\n            {/* ===Form Add players in computer=== */}\n            <Responsive\n                {...Responsive.onlyComputer}\n                as={Segment}\n                raised\n            >\n                <Grid columns={2} relaxed='very' >\n\n                {/* Component Create Player */}\n                    <Grid.Column>\n                        <Header as='h3' textAlign='center' > <Icon name='user plus' /> Create Player </Header>\n                        \n                        <Form error={error} >\n                            <Form.Field>\n                                <label> <Icon name='address card' /> Name : </label>\n                                <input\n                                    value={name.name}\n                                    placeholder='Name Player ' \n                                    onChange={(event) => setName({name : event.target.value }) }\n                                />\n                            </Form.Field>\n                            <Message\n                                error\n                                header='Error'\n                                content='Error try again !'\n                            />\n                            <Button \n                                type='submit' \n                                primary \n                                onClick={() => {\n                                postNewAPIType('players',name)\n                                .then(value => {\n                                        listPlayer.push(value.data);\n                                        setName({name : ''});\n                                        setError(false);\n                                        //document.getElementById('inputName').value = '';\n                                })\n                                .catch(err => setError(true) );\n                                } }\n                            > <Icon name='check' /> Submit</Button>\n                        </Form>\n\n                    </Grid.Column>\n\n                    {/* Component List Player */}\n\n\n                    <Grid.Column>\n                        <Header as='h3' textAlign='center' > <Icon name='users' /> List Player </Header>\n                        {\n                            ( !!listPlayer.length ) ?\n                            // get data success\n                            <List divided verticalAlign='middle' size='big' >\n                                {/* test listPlayer */}\n                                {\n                                    listPlayer.map(player => (\n                                        <List.Item key={player._id} >\n                                            <List.Content floated='right' >\n                                                <Button \n                                                    icon \n                                                    color='red' \n                                                    size='mini' \n                                                    onClick={() => {\n                                                        console.log(player._id)\n                                                        deleteAPIType('players',player._id)\n                                                        .then(value => setListPlayer(value.data) )\n                                                        .catch(err => console.log(err) )\n                                                    }}\n                                                > <Icon name='delete' /> </Button>\n                                            </List.Content>\n                                            <Icon name='user' />\n                                            <List.Content verticalAlign='middle' > {player.name} </List.Content>\n                                        </List.Item>\n                                    ))\n                                }\n                            </List>\n                            :\n                            // Loading khi chờ get data\n                            <Segment>\n                            <Loader active inline='centered' />\n                            </Segment>\n                        }                           \n                    </Grid.Column>\n                </Grid>\n\n                <Divider vertical>And</Divider>\n            </Responsive>\n            {/* === END Players Computer === */}\n            <Responsive\n                {...Responsive.onlyMobile}\n                as={Tab}\n                panes={panes}\n            />\n        </Container>\n    )\n};\n\n\nexport default PlayersPage;","// all object post data in server\nfunction Group(name,background,players) {\n    this.name = name;\n    this.background = background;\n    this.players = players;\n    this.games = []\n}\n\nfunction Gameplay(type,group,stages,summary) {\n    this.game = type;\n    this.group = {\n        idGroup : group._id,\n        name : group.name\n    };\n    this.stages = stages;\n    this.summary = summary;\n}\n\nexport {Gameplay,Group};","import React,{useState, useEffect} from 'react';\nimport {getAllAPIType,postNewAPIType,deleteAPIType} from  '../../services/api';\nimport {Group} from '../../services/createObject';\nimport IconHeader from '../../components/IconHeader/Index';\nimport { Container, Divider, Segment, Grid, Form, Button, Header, Icon, List, Message, Popup, Loader, Tab, Responsive } from 'semantic-ui-react';\n\nconst avatarGroups = ['Zeus','Poseidon','Hades'];\n\nfunction GroupsPage() {\n    const [name, setName] = useState({\n        nameGroup : '',\n        validNameGroup : false\n    }); // create name groups\n    const [avatar, setAvatar] = useState('Zeus');\n    const [playerCheck, setPlayerCheck] = useState([]); // player in checkbox\n\n    const [error,setError] = useState(false); // check form true or false\n    const [players,setPlayers] = useState([]); // get all players\n    const [groups,setGroups] = useState([]); // get and show delete groups\n\n    const panes = [\n        {\n            menuItem : 'Create Group',\n            render : () => <Tab.Pane>\n                <Form error={error} >\n                    <Form.Field>\n                        <Form.Input\n                            label={'Name'}\n                            placeholder='Name Group '\n                            error={name.validNameGroup}\n                            value={name.nameGroup}\n                            onChange={(event) => setName({ nameGroup : event.target.value, validNameGroup : false }) }\n                        />\n                    </Form.Field>\n\n                    <Form.Group grouped >\n                        <Header as='h4' > Choose Player: </Header>\n                        {\n                            players.map(player => (\n                                <Form.Checkbox \n                                    key={player._id}\n                                    value={player._id} \n                                    label={player.name}\n                                    onChange={(event,data) => {\n                                        if (data.checked === true) {\n                                            //playersCheckBox.push({name : player.name , idPlayer : player._id})\n                                            playerCheck.push({name : player.name, idPlayer : player._id})\n                                        } else {\n                                            // playerCheck.slice(\n                                            //     playerCheck.findIndex(player => player._id === data.value )    \n                                            // ,1);\n                                            playerCheck.filter(player => player._id !== data.value );\n                                        }\n                                    }}\n                                />\n                            ))\n                        }\n                    </Form.Group>\n\n                    <Form.Group grouped >\n                        <Header as='h4' > Choose Avatar: </Header>\n                        {\n                            avatarGroups.map((ava,index) => (\n                                <Form.Radio\n                                    key={index}\n                                    label={ava}\n                                    value={ava}\n                                    checked={avatar === ava}\n                                    onChange={() => setAvatar(ava) }\n                                />\n                            ))\n                        }\n                    </Form.Group>\n\n                    <Message\n                        error\n                        header='Error'\n                        content='Error try again !'\n                    />\n                    {/* Btn submit add group */}\n                    <Button \n                        type='submit' \n                        onClick={(event) => {\n                            let newValuePost = new Group(name.nameGroup,avatar,playerCheck);\n                            if ( !!name.nameGroup === false ) {\n                                setName({ nameGroup : '', validNameGroup : true });\n                            } else {\n                                postNewAPIType('groups',newValuePost)\n                                .then(value => {\n                                    groups.push(value.data);\n                                    setAvatar('Zeus');\n                                    setPlayerCheck([]);\n                                    setName({ nameGroup : '', validNameGroup : false });\n                                    setError(false);\n                                })\n                                .catch(err => setError(true) );\n                            }\n                        }}\n                        \n                    > <Icon name='check' /> Submit</Button>\n                </Form>\n            </Tab.Pane>\n        },\n        {\n            menuItem : 'List Groups',\n            render : () => <Tab.Pane>\n                <List divided verticalAlign='middle' size='big' >\n                                    \n                    {\n                        groups.map(group => (\n                            <Popup\n                                key={group._id}\n                                basic\n                                content={(\n                                    <List as='ol' >\n                                        {\n                                            group.players.map((player,index) => (\n                                                <List.Item as='li' key={index} >\n                                                    <List.Content>\n                                                        <Icon name='user' />\n                                                        <List.Header> {player.name} </List.Header>\n                                                    </List.Content>\n                                                </List.Item>\n                                            ))\n                                        }\n                                    </List>\n                                )}\n                                trigger={\n                                    <List.Item>\n                                        <List.Content floated='right' >\n                                            <Button\n                                                icon\n                                                color='red'\n                                                size='mini'\n                                                onClick={() => {\n                                                    deleteAPIType('groups', group._id)\n                                                    .then(value => setGroups(value.data) )\n                                                    .catch(err => console.log(err) )\n                                                } }\n                                            > <Icon name='delete' /> </Button>\n                                        </List.Content>\n                                        \n                                        <Icon name='group' />\n\n                                        <List.Content> {group.name} </List.Content>\n                                    </List.Item>\n                                }\n                            />\n                        ))\n                    }\n                </List>\n            </Tab.Pane>\n        }\n    ];\n\n    const fetchPlayerGroups = async () => {\n        try {\n            const [resPlayers,resGroups] = await Promise.all([\n                getAllAPIType('players'),\n                getAllAPIType('groups')\n            ]);\n            setPlayers(resPlayers.data);\n            setGroups(resGroups.data);\n\n        } catch(err) {\n            console.log(err);\n            setPlayers([]);\n            setGroups([]);\n        }\n    };\n\n    useEffect(() => {fetchPlayerGroups()}, [])\n\n    return (\n        <Container>\n            <IconHeader icon='group' header='Groups' sub='Groups : Create and List' />\n            <Divider/>\n\n            {\n                (\n                    !!players.length === false\n                ) ?\n                \n                <Segment>\n                    <Loader active inline='centered' />\n                </Segment>\n                \n                :\n                <div>\n                    <Responsive\n                        {...Responsive.onlyComputer}\n                        as={Segment}\n                        raised\n                    >\n                        <Grid columns={2} relaxed='very' >\n                            \n                            {/* Component Create Player */}\n                            <Grid.Column>\n                                <Header as='h3' textAlign='center'> <Icon name='group' /> Create Group </Header>\n\n                                {/* Form create group */}\n                                <Form error={error} >\n                                    <Form.Field>\n                                        <Form.Input\n                                            label={'Name'}\n                                            placeholder='Name Group '\n                                            error={name.validNameGroup}\n                                            value={name.nameGroup}\n                                            onChange={(event) => setName({ nameGroup : event.target.value, validNameGroup : false }) }\n                                        />\n                                    </Form.Field>\n\n                                    <Form.Group grouped >\n                                        <Header as='h4' > Choose Player: </Header>\n                                        {\n                                            players.map(player => (\n                                                <Form.Checkbox \n                                                    key={player._id}\n                                                    value={player._id} \n                                                    label={player.name}\n                                                    onChange={(event,data) => {\n                                                        if (data.checked === true) {\n                                                            //playersCheckBox.push({name : player.name , idPlayer : player._id})\n                                                            playerCheck.push({name : player.name, idPlayer : player._id})\n                                                        } else {\n                                                            // playerCheck.slice(\n                                                            //     playerCheck.findIndex(player => player._id === data.value )    \n                                                            // ,1);\n                                                            playerCheck.filter(player => player._id !== data.value );\n                                                        }\n                                                    }}\n                                                />\n                                            ))\n                                        }\n                                    </Form.Group>\n\n                                    <Form.Group grouped >\n                                        <Header as='h4'> Choose Avatar: </Header>\n                                        {\n                                            avatarGroups.map((ava,index) => (\n                                                <Form.Radio\n                                                    key={index}\n                                                    label={ava}\n                                                    value={ava}\n                                                    checked={avatar === ava}\n                                                    onChange={() => setAvatar(ava) }\n                                                />\n                                            ))\n                                        }\n                                    </Form.Group>\n\n                                    <Message\n                                        error\n                                        header='Error'\n                                        content='Error try again !'\n                                    />\n                                    {/* Btn submit add group */}\n                                    <Button \n                                        type='submit' \n                                        onClick={(event) => {\n                                            let newValuePost = new Group(name.nameGroup,avatar,playerCheck);\n                                            if ( !!name.nameGroup === false ) {\n                                                setName({ nameGroup : '', validNameGroup : true });\n                                            } else {\n                                                postNewAPIType('groups',newValuePost)\n                                                .then(value => {\n                                                    groups.push(value.data);\n                                                    setAvatar('Zeus');\n                                                    setPlayerCheck([]);\n                                                    setName({ nameGroup : '', validNameGroup : false });\n                                                    setError(false);\n                                                })\n                                                .catch(err => setError(true) );\n                                            }\n                                        }}\n                                        \n                                    > <Icon name='check' /> Submit</Button>\n                                </Form>\n                                {/* ===End=== */}\n\n                            </Grid.Column>\n                            \n                            {/* Component List Player */}\n                            <Grid.Column>\n                                <Header as='h3' textAlign='center'> <Icon name='group' /> List Groups </Header>\n                                <List divided verticalAlign='middle' size='big' >\n                                    \n                                    {\n                                        groups.map(group => (\n                                            <Popup\n                                                key={group._id}\n                                                basic\n                                                content={(\n                                                    <List as='ol' >\n                                                        {\n                                                            group.players.map((player,index) => (\n                                                                <List.Item as='li' key={index} >\n                                                                    <List.Content>\n                                                                        <Icon name='user' />\n                                                                        <List.Header> {player.name} </List.Header>\n                                                                    </List.Content>\n                                                                </List.Item>\n                                                            ))\n                                                        }\n                                                    </List>\n                                                )}\n                                                trigger={\n                                                    <List.Item>\n                                                        <List.Content floated='right' >\n                                                            <Button\n                                                                icon\n                                                                color='red'\n                                                                size='mini'\n                                                                onClick={() => {\n                                                                    deleteAPIType('groups', group._id)\n                                                                    .then(value => setGroups(value.data) )\n                                                                    .catch(err => console.log(err) )\n                                                                } }\n                                                            > <Icon name='delete' /> </Button>\n                                                        </List.Content>\n                                                        \n                                                        <Icon name='group' />\n\n                                                        <List.Content> {group.name} </List.Content>\n                                                    </List.Item>\n                                                }\n                                            />\n                                        ))\n                                    }\n                                </List>\n                            </Grid.Column>\n                        \n                        </Grid>\n                        \n                        <Divider vertical>And</Divider>\n                    </Responsive>\n                \n                    {/* Responsize for mobile */}\n\n                    <Responsive\n                        as={Tab}\n                        {...Responsive.onlyMobile}\n                        panes={panes}\n                    />\n\n                </div>\n            }\n\n        </Container>\n    )\n}\n\nexport default GroupsPage;","import {Gameplay} from './createObject';\nimport {postNewAPIType} from './api';\n\nfunction oneWin(arrayGames,winner,setState) {\n    let newArrayGame = arrayGames.map(inGame => {\n        if (inGame.name === winner) {\n            inGame.isWin = true;\n            return inGame;\n        } else {\n            inGame.isWin = false;\n            return inGame;\n        }\n    });\n    setState(newArrayGame);\n};\n\nfunction setPointPlayer(arrayGames,player,point,setState,event) {\n    event.persist();\n    let newPointPlayer = arrayGames.map(game => {\n        if (game.name === player ) {\n            game.point = parseInt(point);\n            return game;\n        } else {\n            return game;\n        }\n    });\n    setState(newPointPlayer);\n}\n\nfunction gameplayArray(arrayGames) {\n    let pointWin = arrayGames.reduce((acc,cur) => {\n        if (cur.isWin === true) {\n            return acc;\n        } else {\n            return acc + parseInt(cur.point);\n        }\n    },0);\n\n    return arrayGames.map(value => {\n        if (value.isWin === true) {\n            value.point = pointWin;\n            return value;\n        } else {\n            value.point = value.point * -1;\n            return value;\n        }\n    });\n}\n\nfunction pointWinner(stages,namePlayer) {\n    let pointWinArray = [];\n    stages.forEach(stage => {\n        stage.gameplay.forEach(game => {\n            if ( game.name === namePlayer ) {\n                pointWinArray.push(parseInt(game.point));\n            }\n        })            \n    });\n    // let pointWin = pointWinArray.reduce((acc,cur) => {\n    //     return acc + cur;\n    // }, 0);\n    let pointWin = pointWinArray.reduce((acc,cur) => acc + cur, 0 );\n    //console.log(pointWin);\n    return pointWin;\n}\n// data in Gameplay client input\n// group => name player and id\n// stages data game play\n//\n\n// return array[{ name : '', point : ', _idPlayer : id }]\nfunction summaryOfStages(stages,players) {\n    // create array summary\n    let newSummary = players.map(player => ({\n        idPlayer : player.idPlayer,\n        name : player.name,\n        point : pointWinner(stages,player.name),\n        isWin : false\n    }));\n    // find point winner\n    let winPoint = newSummary.reduce((acc,cur) => {\n        return Math.max(acc, cur.point);\n    },0);\n    // check who max point this game and check win true\n    newSummary.map(summary => {\n        if ( summary.point === winPoint ) {\n            summary.isWin = true;\n            return summary;\n        } else {\n            summary.isWin = false;\n            return summary;\n        }\n    });\n    return newSummary;\n}\n\nfunction saveData(gameName,group,stages,callback,history) {\n    let summary = summaryOfStages(stages,group.players);\n    let newGameplay = new Gameplay(gameName,group,stages,summary);\n    postNewAPIType('gameplay', newGameplay)\n        .then(value => history.push('/game/finish') )\n        .catch(err => callback(false) )\n}\n\nexport {oneWin,setPointPlayer, gameplayArray, pointWinner, summaryOfStages,saveData};","import React,{useState, useEffect} from 'react';\nimport * as moment from 'moment';\nimport {oneWin, setPointPlayer, gameplayArray, pointWinner, saveData} from '../../services/run';\nimport {getOneAPIType} from '../../services/api';\nimport { Loader, Container, Header, Button, Checkbox, Icon, Table, Input, Modal, Divider, Message, Responsive } from 'semantic-ui-react';\n\nfunction GameplayPage(props) {\n    const [group,setGroup] = useState({}); // * get from server\n    const [stages,setStages] = useState([]); // * namePlayer only using stages\n\n    const [stageNumber, setStageNumber] = useState(1);\n    const [gameplay, setGameplay] = useState(false); // valueGame is stage\n    const [error, setError] = useState(true);\n\n    const {match,history} = props;\n\n    const fetchGroup = async (idGroup) => {\n       try {\n           const res = await getOneAPIType('groups', idGroup);\n           const newGame = res.data.players.map(player => ({\n               idPlayer : player.idPlayer,\n               name : player.name,\n               point : 0,\n               isWin : false\n            }));\n            setGroup(res.data);\n            setGameplay(newGame);\n       } catch(err) {\n           console.log(err);\n           setGroup({});\n           setGameplay(false);\n       }\n    };\n\n    useEffect(() => { fetchGroup(match.params.groupID) }, []);\n    // ======= Loading =========\n    if ( Object.keys(group).length = 0 || !!gameplay === false ) {\n        return <Loader active inline />\n    }\n    return (\n        <Container>\n            <Divider horizontal >\n                <Header as='h3'> <Icon name='chess'/> Game Start </Header>\n            </Divider>\n            \n            <Table definition color='black' >\n                <Table.Body>\n                    <Table.Row>\n                        <Table.Cell width={2}> <Icon name='group'/> Group Play </Table.Cell>\n                        <Table.Cell> {group.name} </Table.Cell>\n                    </Table.Row>\n                    <Table.Row>\n                        <Table.Cell> <Icon name='calendar alternate'/> Date </Table.Cell>\n                        <Table.Cell> {moment().format('MMMM Do YYYY, h:mm:ss a')} </Table.Cell>\n                    </Table.Row>\n                </Table.Body>\n            </Table>\n\n            {/* Table Game */}\n            <Divider horizontal >\n                <Header as='h4'> <Icon name='chess pawn' /> Stage : {stageNumber} </Header>\n            </Divider>\n            {/* FOR COMPUTER */}\n            <Responsive\n                {...Responsive.onlyComputer}\n                as={Table}\n                celled compact definition color='black'\n            >\n                <Table.Header fullWidth>\n                    <Table.Row>\n                        <Table.HeaderCell> <Header as='h4' color='red' textAlign='center' > Win </Header> </Table.HeaderCell>\n                        <Table.HeaderCell> <Icon name='user' /> Player </Table.HeaderCell>\n                        <Table.HeaderCell> <Icon name='chess board'/> Point Player Lose </Table.HeaderCell>\n                        <Table.HeaderCell> <Icon name='winner'/> Win Game </Table.HeaderCell>\n                        <Table.HeaderCell> <Icon name='keyboard' /> Total </Table.HeaderCell>\n                    </Table.Row>\n                </Table.Header>\n\n                <Table.Body>\n                    {\n                        gameplay.map((player,index,valueArray) => (\n                            <Table.Row key={index} >\n                                <Table.Cell collapsing>\n                                    <Checkbox \n                                        slider\n                                        value={player.name}\n                                        checked={player.isWin}\n                                        onChange={(event,data) => oneWin(valueArray,data.value, setGameplay)}\n                                    />\n                                </Table.Cell>\n                                <Table.Cell> <Icon name='user outline ' /> {player.name} </Table.Cell>\n\n                                <Table.Cell>\n                                    <Input\n                                        type='number'\n                                        value={player.point}\n                                        name={player.name}\n                                        disabled={player.isWin}\n                                        placeholder={player.isWin ? ' Winner ' : ' Losser ' }\n                                        onFocus={(event) => event.target.value = ''  }\n                                        onChange={(event,data) => setPointPlayer(valueArray, data.name, data.value, setGameplay, event)}\n                                    />\n                                </Table.Cell>\n                                <Table.Cell>\n                                    {\n                                        (player.isWin) ? \n                                        <Icon name='winner' />\n                                        :\n                                        <Icon name='thumbs down outline' />\n                                    }\n                                </Table.Cell>\n                                <Table.Cell>\n                                    {\n                                        (player.isWin) ?\n                                        <p> {(gameplay.reduce((acc,cur) => {\n                                            return acc + parseInt(cur.point);\n                                        },0))} </p>\n                                        :\n                                        <p> {player.point * -1} </p>\n                                    }\n                                </Table.Cell>\n                            </Table.Row>\n                        ))\n                    }\n                </Table.Body>\n\n                <Table.Footer fullWidth>\n                    <Table.Row>\n                        <Table.HeaderCell />\n                        <Table.HeaderCell colSpan='4'>\n                            {/* Begin Modal End Game */}\n                            <Modal trigger={<Button primary > <Icon name='paint brush' /> Finish Game</Button>}>\n                                <Modal.Header> <Icon name='chess' /> Game Play </Modal.Header>\n                                <Modal.Content>\n                                    <Modal.Description>\n                                        <Header> <Icon name='dollar sign' /> Summary Point </Header>\n                                        {/* Error Save Data */}\n                                        <Message negative hidden={error} >\n                                            <Message.Header> Sorry, cannot update Data !!!! </Message.Header>\n                                            <p> Try again later ! </p>\n                                        </Message>\n                                        <Table celled color='black' >\n                                            <Table.Header>\n                                                <Table.Row>\n                                                    <Table.HeaderCell> Player </Table.HeaderCell>\n                                                    {\n                                                        group.players.map((player,index) => (\n                                                            <Table.HeaderCell key={index} > {player.name} </Table.HeaderCell>\n                                                            ))\n                                                        }\n                                                </Table.Row>\n                                            </Table.Header>\n                                            <Table.Body>\n                                                <Table.Row>\n                                                    <Table.Cell> Total </Table.Cell>\n                                                    {\n                                                        group.players.map((player,index) => (\n                                                            <Table.Cell key={index}> {pointWinner(stages,player.name)} </Table.Cell>\n                                                            ))\n                                                        }\n                                                </Table.Row>\n                                            </Table.Body>\n                                        </Table>\n                                    </Modal.Description>\n                                </Modal.Content>\n                                <Modal.Actions>\n                                    <Button primary onClick={() => saveData('UNO',group,stages,setError,history) }>\n                                        Save <Icon name='right chevron' />\n                                    </Button>\n                                </Modal.Actions>\n                            </Modal>                     \n                            {/* ========= END ============== */}\n                            <Button floated='right' color='orange' size='small' icon onClick={() => {\n                                let gameplayArr = gameplayArray(gameplay);       \n                                \n                                stages.push({\n                                    stage : stageNumber,\n                                    gameplay : gameplayArr // gameplay already play this stage\n                                });\n                                                            \n                                setStageNumber(stageNumber + 1); // change next stage\n\n                                setStages(stages); // change next stage\n\n                                setGameplay(() => {\n                                    let newGame = group.players.map(player => ({\n                                        idPlayer : player.idPlayer,\n                                        name : player.name,\n                                        point : 0,\n                                        isWin : false\n                                    }));\n                                    return newGame;\n                                });\n\n                                }}> \n                                <Icon name='arrow alternate circle right outline' /> Next Stage \n                            </Button>\n                        </Table.HeaderCell>\n                    </Table.Row>\n                </Table.Footer>\n            </Responsive>\n            {/* END FOR COMPUTER */}\n\n            {/* FOR MOBILE */}\n            <Responsive\n                {...Responsive.onlyMobile}\n                as={Table}\n                definition colot='black'\n            >\n                <Table.Body>\n                    {\n                        gameplay.map((player,index,valueArray) => (\n                            <Table.Row\n                                key={index}\n                            >\n                                <Table.Cell > {player.name} </Table.Cell>\n                                \n                                <Table.Cell>\n                                    <Input\n                                        fluid\n                                        type='number'\n                                        value={player.point}\n                                        name={player.name}\n                                        disabled={player.isWin}\n                                        placeholder={player.isWin ? ' Winner ' : ' Losser ' }\n                                        onFocus={(event) => event.target.value = ''  }\n                                        onChange={(event,data) => setPointPlayer(valueArray, data.name, data.value, setGameplay, event)}\n                                    />\n                                </Table.Cell>\n                                <Table.Cell>\n                                    <Checkbox\n                                        label='Player is win ?'\n                                        value={player.name}\n                                        checked={player.isWin}\n                                        onChange={(event,data) => oneWin(valueArray,data.value, setGameplay)}\n                                    /> \n                                </Table.Cell>\n                            </Table.Row>\n                        ))\n                    }\n                </Table.Body>\n                <Table.Footer>\n                    <Table.Row>\n                        <Table.HeaderCell />\n                        <Table.HeaderCell colSpan='4' >\n                            {/* Begin Modal End Game */}\n                            <Modal trigger={<Button primary > <Icon name='paint brush' /> Finish Game</Button>}>\n                                <Modal.Header> <Icon name='chess' /> Game Play </Modal.Header>\n                                <Modal.Content>\n                                    <Modal.Description>\n                                        <Header> <Icon name='dollar sign' /> Summary Point </Header>\n                                        {/* Error Save Data */}\n                                        <Message negative hidden={error} >\n                                            <Message.Header> Sorry, cannot update Data !!!! </Message.Header>\n                                            <p> Try again later ! </p>\n                                        </Message>\n                                        <Table celled color='black' >\n                                            <Table.Body>\n                                                {\n                                                    group.players.map((player,index) => (\n                                                        <Table.Row key={index} >\n                                                            <Table.Cell> {player.name} </Table.Cell>\n                                                            <Table.Cell key={index}> {pointWinner(stages,player.name)} </Table.Cell>\n                                                        </Table.Row>\n                                                    ))\n                                                }\n                                            </Table.Body>\n                                        </Table>\n                                    </Modal.Description>\n                                </Modal.Content>\n                                <Modal.Actions>\n                                    <Button primary onClick={() => saveData('UNO',group,stages,setError,history) }>\n                                        Save <Icon name='right chevron' />\n                                    </Button>\n                                </Modal.Actions>\n                            </Modal>                     \n                            {/* ========= END ============== */}\n                            <Button floated='right' color='orange' size='small' icon onClick={() => {\n                                let gameplayArr = gameplayArray(gameplay);       \n                                \n                                stages.push({\n                                    stage : stageNumber,\n                                    gameplay : gameplayArr // gameplay already play this stage\n                                });\n                                                            \n                                setStageNumber(stageNumber + 1); // change next stage\n\n                                setStages(stages); // change next stage\n\n                                setGameplay(() => {\n                                    let newGame = group.players.map(player => ({\n                                        idPlayer : player.idPlayer,\n                                        name : player.name,\n                                        point : 0,\n                                        isWin : false\n                                    }));\n                                    return newGame;\n                                });\n\n                                }}> \n                                <Icon name='arrow alternate circle right outline' /> Next Stage \n                            </Button>\n                        </Table.HeaderCell>\n                    </Table.Row>\n                </Table.Footer>\n            </Responsive>\n\n            {/* === End Table Game === */}\n\n            {/* Stages already PLAY */}\n            <Responsive\n                as={Divider}\n                {...Responsive.onlyComputer}\n                horizontal\n            >\n                <Header as='h4'> <Icon name='coffee' /> Stages already play : </Header>\n            </Responsive>\n            {/* STAGES PLAY FOR COMPUTER */}\n            <Responsive\n                as={Table}\n                {...Responsive.onlyComputer}\n                celled color='black'\n            >\n                <Table.Header>\n                    <Table.Row>\n                        <Table.HeaderCell> <Icon name='user' circular /> Player </Table.HeaderCell>\n                        {\n                            gameplay.map((player,index) => (\n                                <Table.HeaderCell key={index} > <Icon name='user outline' /> {player.name} </Table.HeaderCell>\n                            ))\n                        }\n                    </Table.Row>\n                </Table.Header>\n                <Table.Body>\n                    {\n                        stages.map((inStage,index) => (\n                            <Table.Row key={index} >\n                                <Table.Cell> <Icon name='coffee'/> Stage : {inStage.stage} </Table.Cell>\n                                {\n                                    inStage.gameplay.map((game,index) => (\n                                        <Table.Cell key={index} > <Icon name='winner' /> {game.point} </Table.Cell>\n                                    ))\n                                }\n                            </Table.Row>\n                        ))\n                    }\n                </Table.Body>\n            </Responsive>\n            {/* =========================== END ====================== */}\n\n        </Container>\n    )\n}\n\n\nexport default GameplayPage;","import React from 'react';\nimport { Card, Image, Button, Segment, Loader, Icon, List } from 'semantic-ui-react';\nimport {Link} from 'react-router-dom';\nimport url from '../../services/url';\n\nfunction RouteGroup(props) {\n    const {groups} = props;\n    //console.log(groups);\n    if ( groups === undefined || !!groups.length === false) {\n        return (\n            <Segment>\n                <Loader active inline='centered' />\n            </Segment>\n        )\n    } else {\n        return (\n            <Card.Group>\n                {\n                    props.groups.map((group,index) => (\n                        <Card key={index} >\n                            <Image \n                                src={`${url.server}/image/${group.background}.jpg`} \n                                wrapped \n                                ui={false} \n                            />\n                            <Card.Content>\n                                <Card.Header> <Icon name='group' circular /> {group.name} </Card.Header>\n                                <Card.Description>\n                                    <List ordered >\n                                        {\n                                            group.players.map((player,index) => (\n                                                <List.Item key={index} >\n                                                    <Icon name='user' />\n                                                    <List.Content>\n                                                        <List.Header> {player.name} </List.Header>\n                                                     \n                                                    </List.Content>\n                                                </List.Item>\n                                            ))\n                                        }\n                                    </List>\n                                </Card.Description>\n                            </Card.Content>\n                            <Card.Content extra >\n                                <Button color='orange' as={Link} to={`${props.match.url}/${group._id}`} > Go {group.name} Page </Button>\n                            </Card.Content>\n                        </Card>\n                    ))\n                }\n            </Card.Group>\n        )\n    }\n\n};\n\nexport default RouteGroup;","import React,{useState,useEffect} from 'react';\nimport {getAllAPIType} from '../../services/api';\nimport GameplayPage from './Gameplay';\nimport RouteGroup from '../../components/GroupCard/Index';\nimport {Switch,Route} from 'react-router-dom';\nimport { Segment } from 'semantic-ui-react';\n\nfunction UnoPage(props) {\n    const [groups,setGroups] = useState([]);\n    const {match} = props;\n\n    const fetchGroups = async () => {\n        try {\n            const res = await getAllAPIType('groups');\n            setGroups(res.data);\n        } catch(err) {\n            console.log(err);\n            setGroups([]);\n        }\n    };\n\n    useEffect(() => {fetchGroups()}, [] );\n\n    // show all group play\n    return (\n        <Segment raised >\n            <Switch>\n                <Route exact path={`${match.url}`} render={(match) => <RouteGroup groups={groups} {...match} /> }  />\n                <Route path={`${match.url}/:groupID`} render={(match) => <GameplayPage {...match} />} />\n            </Switch>\n        </Segment>\n    )\n};\n\nexport default UnoPage;","import React from 'react';\nimport { Container, Segment, Header, Icon, Button, Divider } from 'semantic-ui-react';\nimport {withRouter} from 'react-router-dom';\n\nfunction FinishPage(props) {\n    const {history} = props;\n    return (\n        <Container>\n            <Segment color='red' >\n                <Header as='h3' icon textAlign='center' >\n                    <Icon name='chess' circular />\n                    <Header.Content> Finish Update Game. Try another match . </Header.Content>\n                </Header>\n                <Button fluid color='violet' onClick={() => history.push('/game/uno') } > Next Match :)) </Button>\n                <Divider/>\n                <Button fluid color='orange' onClick={() => history.push('/') } > Back </Button>\n            </Segment>\n        </Container>\n    )\n};\n\nexport default withRouter(FinishPage);","import React from 'react';\nimport IconHeader from '../../components/IconHeader/Index';\nimport UnoPage from './Uno';\nimport FinishPage from './Finish';\nimport { Container, Divider, Card, Button,Image, Segment } from 'semantic-ui-react';\nimport {Switch,Route, Link} from 'react-router-dom';\nimport imageUno from '../../Image/UNO.png';\nimport imageTienLen from '../../Image/TienLen.jpg';\n\nconst routePageArr = [\n    {\n        nameRoute : 'UNO',\n        description : 'Input Point Player Game UNO',\n        link : '/game/uno',\n        avatar : imageUno\n    },\n    {\n        nameRoute : 'Tiến Lên',\n        description : 'Input Point Player Game Tiến Lên',\n        link : '/game/tienlen',\n        avatar : imageTienLen\n    }\n];\n\nfunction GamePage() {\n    return (\n        <Container>\n            <IconHeader icon='chess rock' header='Game' sub='Game Play UNO and ...' />\n            <Divider/>\n\n            <Switch>\n                <Route exact path='/game' render={() => <RouteGamePage/> } />\n                {/* Sub route game */}\n                <Route path='/game/uno' render={(match) => <UnoPage {...match} /> } />\n                <Route path='/game/tienlen' render={() => <h1> /game/tienlen </h1> } />\n                <Route path='/game/finish' render={() => <FinishPage/> } />\n            </Switch>\n\n        </Container>\n    )   \n};\n\nfunction RouteGamePage() {\n    return (\n        <Segment padded='very'>\n            <Card.Group centered >\n                {\n                    routePageArr.map((route,index) => (\n                        <Card key={index} >\n                            <Image src={route.avatar} wrapped ui={false} />\n                            <Card.Content>\n                                <Card.Header> {route.nameRoute} </Card.Header>\n                                <Card.Description> {route.description} </Card.Description>\n                            </Card.Content>\n                            <Card.Content extra>\n                                <Button color='orange' as={ Link } to={route.link} > Go {route.nameRoute} Page </Button>\n                            </Card.Content>\n                        </Card>\n                    ))\n                }\n            </Card.Group>\n        </Segment>\n    )\n}\n\nexport default GamePage;","import React, {useState, useEffect} from 'react';\nimport * as moment from 'moment';\nimport {getOneAPIType} from '../../services/api';\nimport url from '../../services/url';\nimport { Loader, Segment, Header, Container,Image, List, Icon, Card, Button, Modal, Table, Divider, Responsive } from 'semantic-ui-react';\n\nfunction SummaryPage(props) {   \n    const [group, setGroup] = useState({});\n    const {match} = props;\n\n    const fetchGroup = async (groupID) => {\n        try {\n            const res = await getOneAPIType('groups', groupID);\n            setGroup(res.data);\n        } catch(err) {\n            console.log(err);\n            setGroup({});\n        }\n    };\n    //console.log(group);\n    useEffect(() => { fetchGroup(match.params.groupID) }, []);\n\n    if ( !!Object.keys(group).length === false ) {\n        return <Loader active inline />\n    } else {\n        return (\n            <Segment>\n                <Container>\n                    <Divider horizontal >\n                        <Header as='h3'> <Icon name='plus' /> Summary Game </Header>    \n                    </Divider>\n\n                    <Table definition color='black' >\n                        <Table.Body>\n                            <Table.Row>\n                                <Table.Cell> <Icon name=\"address book\" /> Name Group </Table.Cell>\n                                <Table.Cell> <Image src={`${url.server}/image/${group.background}.jpg`} avatar /> {group.name} </Table.Cell>\n                            </Table.Row>\n                            <Table.Row>\n                                <Table.Cell> <Icon name=\"address book outline\" /> ID Group </Table.Cell>\n                                <Table.Cell> {group._id} </Table.Cell>\n                            </Table.Row>\n                            <Table.Row>\n                                <Table.Cell> <Icon name=\"calendar\" /> Date Create </Table.Cell>\n                                <Table.Cell> {moment(group.createAt).format('MMMM Do YYYY, h:mm:ss a')} </Table.Cell>\n                            </Table.Row>\n                            <Table.Row>\n                                <Table.Cell> <Icon name=\"user outline \" /> Players </Table.Cell>\n                                <Table.Cell>\n                                    <List horizontal >\n                                    {\n                                        group.players.map(player => (\n                                            <List.Item key={player.idPlayer} >\n                                                <List.Content>\n                                                    <List.Header> <Icon name='user' />{player.name} </List.Header>\n                                                </List.Content>\n                                            </List.Item>\n                                        ))\n                                    }  \n                                    </List>\n                                </Table.Cell>\n                            </Table.Row>\n                        </Table.Body>\n                    </Table>\n                    \n                    <Divider horizontal >\n                        <Header as='h3'> <Icon name='calendar' /> Date Play Game </Header>    \n                    </Divider>\n\n                    <Table definition color='black' >\n                        {\n                            group.games.map((game,index) => (\n                                <Table.Row key={index} >\n                                    <Table.Cell> <Icon name='calendar' /> Date {index + 1 } </Table.Cell>\n                                    <Table.Cell>\n                                        {/* Modal */}\n                                        <Modal trigger={<Button> {moment(game.idGameplay.playAt).format('MMMM Do YYYY, h:mm:ss a')} </Button>} >\n                                            <Modal.Content>\n                                \n                                                <Divider horizontal >\n                                                    <Header as='h3'> <Icon name='chess pawn' /> Point Match </Header>    \n                                                </Divider>\n\n                                                <Table celled color='black' >\n                                                    <Table.Header>\n                                                        <Table.Row>\n                                                            <Table.HeaderCell> <Icon name='user' circular /> Player </Table.HeaderCell>\n                                                            {\n                                                                game.idGameplay.summary.map((player,index) => (\n                                                                    <Table.HeaderCell key={index} > <Icon name='user outline' /> {player.name} </Table.HeaderCell>\n                                                                ))\n                                                            }\n                                                        </Table.Row>\n                                                    </Table.Header>\n                                                    <Table.Body>\n                                                        {\n                                                            game.idGameplay.stages.map((inStage,index) => (\n                                                                <Table.Row key={index} >\n                                                                    <Table.Cell> <Icon name='coffee'/> Stage : {inStage.stage} </Table.Cell>\n                                                                    {\n                                                                        inStage.gameplay.map((game,index) => (\n                                                                            <Table.Cell key={index} > <Icon name='winner' /> {game.point} </Table.Cell>\n                                                                        ))\n                                                                    }\n                                                                </Table.Row>\n                                                            ))\n                                                        }\n                                                    </Table.Body>\n                                                </Table>\n                                            \n                                                <Divider horizontal >\n                                                    <Header as='h3'> <Icon name='winner' /> Total Point </Header>    \n                                                </Divider>\n\n                                                <Responsive\n                                                    {...Responsive.onlyComputer}\n                                                    as={Table}\n                                                    celled color='black'\n                                                >\n                                                    <Table.Header>\n                                                        <Table.Row>\n                                                            <Table.HeaderCell> <Icon name='user' circular /> Player </Table.HeaderCell>\n                                                            {\n                                                                game.idGameplay.summary.map((player,index) => (\n                                                                    <Table.HeaderCell key={index} > <Icon name='user outline' /> {player.name} </Table.HeaderCell>\n                                                                ))\n                                                            }\n                                                        </Table.Row>\n                                                    </Table.Header>\n                                                    <Table.Body>\n                                                        <Table.Row>\n                                                            <Table.Cell> <Icon name='coffee' circular /> Point </Table.Cell>\n                                                            {\n                                                                game.idGameplay.summary.map((player,index) => (\n                                                                    <Table.Cell key={index} > <Icon name='winner' /> {player.point} </Table.Cell>\n                                                                ))\n                                                            }\n                                                        </Table.Row>\n                                                    </Table.Body>\n                                                </Responsive>\n                                                {/* MODAL FOR MOBILE */}\n                                                <Responsive\n                                                    {...Responsive.onlyMobile}\n                                                    as={Table}\n                                                    celled color='black'\n                                                >\n                                                    <Table.Body>\n                                                        {\n                                                            game.idGameplay.summary.map((player,index) => (\n                                                                <Table.Row key={index} >\n                                                                    <Table.Cell> {player.name} </Table.Cell>\n                                                                    <Table.Cell> <Icon name='winner' /> {player.point} </Table.Cell>\n                                                                </Table.Row>\n                                                            ))\n                                                        }\n                                                    </Table.Body>\n                                                </Responsive>\n                                                {/* END MODAL FOR MOBILE */}\n                                            </Modal.Content>\n                                            <Modal.Actions>\n                                                <Button primary > Edit </Button>\n                                            </Modal.Actions>\n                                        </Modal>\n                                        {/* ==== END ==== */}\n                                    </Table.Cell>\n                                </Table.Row>\n                            ))\n                        }\n                    </Table>\n                </Container>\n            </Segment>\n        )\n    }\n};\n\nexport default SummaryPage;","import React, {useState, useEffect} from 'react';\nimport IconHeader from '../../components/IconHeader/Index';\nimport RouteGroup from '../../components/GroupCard/Index.js';\nimport SummaryPage from './Summary';\nimport {getAllAPIType} from '../../services/api';\nimport { Container, Divider } from 'semantic-ui-react';\nimport {Switch,Route} from 'react-router-dom';\n\nfunction ResultsPage() { \n    const [groups, setGroups] = useState([]);\n\n    const fetchGroups = async () => {\n        try {\n            const res = await getAllAPIType('groups');\n            setGroups(res.data);\n        } catch(err) {\n            console.log(err);\n            setGroups([]);\n        }\n    };\n\n    useEffect(() => { fetchGroups() }, []);\n\n    //console.log(groups);\n    return (\n        <Container>\n            <IconHeader icon='braille' header='Results' sub='Summary and Store' />\n            <Divider/>\n\n            <Switch>\n                <Route exact path='/results' render={(match) => <RouteGroup groups={groups} {...match} /> } />\n                <Route path='/results/:groupID' render={(match) => <SummaryPage {...match} />} />\n            </Switch>\n        </Container>\n    )\n};\n\n\nexport default ResultsPage;","import React from 'react';\nimport SideBar from './components/SideBar/Index';\nimport HomePage from './Scenes/Home/Index';\nimport PlayerPage from './Scenes/Players/Index';\nimport GroupsPage from './Scenes/Groups/Index';\nimport GamePage from './Scenes/Game/Index';\nimport ResultsPage from './Scenes/Results/Index';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport { Grid,Container } from 'semantic-ui-react';\n\nfunction App() {\n    return (\n      <Router>\n        <Grid>\n          \n          <Grid.Row>\n            <Grid.Column>\n                <SideBar/>\n            </Grid.Column>\n          </Grid.Row>\n\n          <Grid.Row>\n            {/* Route page */}\n            <Grid.Column>\n              <Switch>\n                <Route exact path='/' render={() => <HomePage/> } />\n                <Route path='/players' render={() => <PlayerPage/> } />\n                <Route path='/groups' render={() => <GroupsPage/> } />\n                <Route path='/game' render={() => <GamePage/> } />\n                <Route path='/results' render={() => <ResultsPage/> } />\n              </Switch>\n            </Grid.Column>\n          </Grid.Row>\n\n        </Grid>\n      </Router>\n    )\n}\n\nexport default App;\n\n// App.js 1st pages load page first, route page\n// SideBar lam rieng khong lien quan","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'semantic-ui-css/semantic.min.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}